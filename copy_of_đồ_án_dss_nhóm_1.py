# -*- coding: utf-8 -*-
"""Copy of Đồ án DSS_Nhóm 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1H9UwfFYaVBAmxyJqsjlBAV51TkJBNo8J
"""

# Thư viện
import pandas as pd
import numpy as np
import time
from datetime import datetime

# Thư viện cho mô hình hóa và đánh giá
from sklearn.preprocessing import MinMaxScaler
from sklearn.svm import SVR
from sklearn.metrics import mean_absolute_error, mean_squared_error

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout

# Thư viện trực quan hóa
import matplotlib.pyplot as plt
print("Tất cả thư viện đã được import thành công!")

# Bước 1: Upload dữ liệu vào Colab

from google.colab import files
uploaded = files.upload()

# Bước 2: Tạo thư mục data/ và di chuyển các file vào

import os
import shutil

os.makedirs("data", exist_ok=True)

for filename in uploaded.keys():
    shutil.move(filename, f"data/{filename}")

# Tạo thư mục pipeline/

import os

os.makedirs("pipeline", exist_ok=True)

# Bước 3: Tiền xử lý dữ liệu

# pipeline/preprocess.py

import pandas as pd
import os

def load_and_process_all(input_dir, output_path=None):
    all_data = []
    for filename in os.listdir(input_dir):
        if filename.endswith(".csv"):
            filepath = os.path.join(input_dir, filename)
            df = pd.read_csv(filepath)

            # Chuẩn hóa tên cột
            df.columns = [col.strip().lower() for col in df.columns]

            # Lấy mã cổ phiếu từ tên file
            code = filename.split("_")[0]

            # Giữ và đổi tên các cột
            df = df[["date", "open", "high", "low", "close", "volume", "turnover"]].copy()

            df["code"] = code
            df["date"] = pd.to_datetime(df["date"])
            df["year"] = df["date"].dt.year
            df["month"] = df["date"].dt.month
            df["day"] = df["date"].dt.day

            # Làm tròn turnover
            df["turnover"] = df["turnover"].round(2)

            # Tính % thay đổi giá (return) theo ngày hiện tại so với hôm trước
            df["return"] = df["close"].pct_change() * 100
            df["return"] = df["return"].round(2)
            df["return"] = df["return"].fillna(0)

            # Gán nhãn target: tăng = 1, giảm/giữ nguyên = 0
            df["target"] = (df["return"] > 0).astype(int)

            # Sắp xếp cột: để code lên đầu, bỏ date gốc
            df = df.drop(columns=["date"])
            columns_order = ["code", "year", "month", "day", "open", "high", "low", "close", "volume", "turnover", "return", "target"]
            df = df[columns_order]

            all_data.append(df)

    # Gộp tất cả vào một DataFrame
    merged_df = pd.concat(all_data, ignore_index=True)

    # Lưu nếu có đường dẫn
    if output_path:
        merged_df.to_csv(output_path, index=False)

    return merged_df

preprocess_code = '''
# pipeline/preprocess.py

import pandas as pd
import os

def load_and_process_all(input_dir, output_path=None):
    all_data = []
    for filename in os.listdir(input_dir):
        if filename.endswith(".csv"):
            filepath = os.path.join(input_dir, filename)
            df = pd.read_csv(filepath)

            # Chuẩn hóa tên cột
            df.columns = [col.strip().lower() for col in df.columns]

            # Lấy mã cổ phiếu từ tên file
            code = filename.split("_")[0]

            # Giữ và đổi tên các cột
            df = df[["date", "open", "high", "low", "close", "volume", "turnover"]].copy()

            df["code"] = code
            df["date"] = pd.to_datetime(df["date"])
            df["year"] = df["date"].dt.year
            df["month"] = df["date"].dt.month
            df["day"] = df["date"].dt.day

            # Làm tròn turnover
            df["turnover"] = df["turnover"].round(2)

            # Tính % thay đổi giá (return) theo ngày hiện tại so với hôm trước
            df["return"] = df["close"].pct_change() * 100
            df["return"] = df["return"].round(2)
            df["return"] = df["return"].fillna(0)

            # Gán nhãn target: tăng = 1, giảm/giữ nguyên = 0
            df["target"] = (df["return"] > 0).astype(int)

            # Sắp xếp cột: để code lên đầu, bỏ date gốc
            df = df.drop(columns=["date"])
            columns_order = ["code", "year", "month", "day", "open", "high", "low", "close", "volume", "turnover", "return", "target"]
            df = df[columns_order]

            all_data.append(df)

    # Gộp tất cả vào một DataFrame
    merged_df = pd.concat(all_data, ignore_index=True)

    # Lưu nếu có đường dẫn
    if output_path:
        merged_df.to_csv(output_path, index=False)

    return merged_df
'''

# Ghi vào file
with open("pipeline/preprocess.py", "w") as f:
    f.write(preprocess_code)

from pipeline.preprocess import load_and_process_all

df = load_and_process_all("data", output_path="pipeline/merged_data.csv")
df.head(10)

!pip install ta

# Bước 4: Tính các chỉ báo kỹ thuật

import pandas as pd
import ta

def add_technical_indicators(df):
    """
    Thêm các chỉ báo kỹ thuật vào DataFrame gốc, gồm:
    - SMA: Trung bình động đơn giản
    - EMA: Trung bình động lũy thừa
    - MACD: Đường trung bình động phân kỳ/hội tụ
    - RSI: Chỉ số sức mạnh tương đối
    - Bollinger Bands: Dải biến động giá
    - ATR: Đo độ biến động trung bình thực tế
    - OBV: Khối lượng cân bằng
    """
    all_data = []

    for code in df['code'].unique():
        # Sắp xếp theo thời gian: year -> month -> day
        sub_df = df[df['code'] == code].sort_values(by=["year", "month", "day"]).copy()

        # --- 1. SMA (Simple Moving Average)
        # SMA = trung bình cộng giá đóng cửa trong n ngày
        sub_df['ma_5'] = ta.trend.sma_indicator(sub_df['close'], window=5).round(2)
        sub_df['ma_20'] = ta.trend.sma_indicator(sub_df['close'], window=20).round(2)

        # --- 2. EMA (Exponential Moving Average)
        # EMA = trung bình giá đóng cửa có trọng số, gần với hiện tại hơn
        sub_df['ema_12'] = ta.trend.ema_indicator(sub_df['close'], window=12).round(2)
        sub_df['ema_26'] = ta.trend.ema_indicator(sub_df['close'], window=26).round(2)

        # --- 3. MACD (Moving Average Convergence Divergence)
        # MACD = EMA(12) - EMA(26)
        # Signal = EMA của MACD
        sub_df['macd'] = ta.trend.macd(sub_df['close']).round(2)
        sub_df['macd_signal'] = ta.trend.macd_signal(sub_df['close']).round(2)

        # --- 4. RSI (Relative Strength Index)
        # RSI = đo độ mạnh/yếu xu hướng trong 14 ngày
        sub_df['rsi_14'] = ta.momentum.rsi(sub_df['close'], window=14).round(2)

        # --- 5. Bollinger Bands
        # Dải trên/dưới là MA ± 2 * độ lệch chuẩn
        bb = ta.volatility.BollingerBands(sub_df['close'], window=20, window_dev=2)
        sub_df['bb_bbm'] = bb.bollinger_mavg().round(2)   # MA
        sub_df['bb_bbh'] = bb.bollinger_hband().round(2)  # Upper band
        sub_df['bb_bbl'] = bb.bollinger_lband().round(2)  # Lower band

        # --- 6. ATR (Average True Range)
        # ATR = đo độ biến động giá trong 14 ngày
        sub_df['atr_14'] = ta.volatility.average_true_range(
            sub_df['high'], sub_df['low'], sub_df['close'], window=14
        ).round(2)

        # --- 7. OBV (On-Balance Volume)
        # OBV = tích lũy khối lượng nếu giá tăng, trừ nếu giá giảm
        sub_df['obv'] = ta.volume.on_balance_volume(sub_df['close'], sub_df['volume']).round(2)

        # Drop các dòng NA do rolling/window tính toán
        sub_df = sub_df.dropna().reset_index(drop=True)
        all_data.append(sub_df)

    result = pd.concat(all_data).reset_index(drop=True)
    return result

indicators_code = '''
# Bước 4: Tính các chỉ báo kỹ thuật

import pandas as pd
import ta

def add_technical_indicators(df):
    """
    Thêm các chỉ báo kỹ thuật vào DataFrame gốc, gồm:
    - SMA: Trung bình động đơn giản
    - EMA: Trung bình động lũy thừa
    - MACD: Đường trung bình động phân kỳ/hội tụ
    - RSI: Chỉ số sức mạnh tương đối
    - Bollinger Bands: Dải biến động giá
    - ATR: Đo độ biến động trung bình thực tế
    - OBV: Khối lượng cân bằng
    """
    all_data = []

    for code in df['code'].unique():
        # Sắp xếp theo thời gian: year -> month -> day
        sub_df = df[df['code'] == code].sort_values(by=["year", "month", "day"]).copy()

        # --- 1. SMA (Simple Moving Average)
        # SMA = trung bình cộng giá đóng cửa trong n ngày
        sub_df['ma_5'] = ta.trend.sma_indicator(sub_df['close'], window=5).round(2)
        sub_df['ma_20'] = ta.trend.sma_indicator(sub_df['close'], window=20).round(2)

        # --- 2. EMA (Exponential Moving Average)
        # EMA = trung bình giá đóng cửa có trọng số, gần với hiện tại hơn
        sub_df['ema_12'] = ta.trend.ema_indicator(sub_df['close'], window=12).round(2)
        sub_df['ema_26'] = ta.trend.ema_indicator(sub_df['close'], window=26).round(2)

        # --- 3. MACD (Moving Average Convergence Divergence)
        # MACD = EMA(12) - EMA(26)
        # Signal = EMA của MACD
        sub_df['macd'] = ta.trend.macd(sub_df['close']).round(2)
        sub_df['macd_signal'] = ta.trend.macd_signal(sub_df['close']).round(2)

        # --- 4. RSI (Relative Strength Index)
        # RSI = đo độ mạnh/yếu xu hướng trong 14 ngày
        sub_df['rsi_14'] = ta.momentum.rsi(sub_df['close'], window=14).round(2)

        # --- 5. Bollinger Bands
        # Dải trên/dưới là MA ± 2 * độ lệch chuẩn
        bb = ta.volatility.BollingerBands(sub_df['close'], window=20, window_dev=2)
        sub_df['bb_bbm'] = bb.bollinger_mavg().round(2)   # MA
        sub_df['bb_bbh'] = bb.bollinger_hband().round(2)  # Upper band
        sub_df['bb_bbl'] = bb.bollinger_lband().round(2)  # Lower band

        # --- 6. ATR (Average True Range)
        # ATR = đo độ biến động giá trong 14 ngày
        sub_df['atr_14'] = ta.volatility.average_true_range(
            sub_df['high'], sub_df['low'], sub_df['close'], window=14
        ).round(2)

        # --- 7. OBV (On-Balance Volume)
        # OBV = tích lũy khối lượng nếu giá tăng, trừ nếu giá giảm
        sub_df['obv'] = ta.volume.on_balance_volume(sub_df['close'], sub_df['volume']).round(2)

        # Drop các dòng NA do rolling/window tính toán
        sub_df = sub_df.dropna().reset_index(drop=True)
        all_data.append(sub_df)

    result = pd.concat(all_data).reset_index(drop=True)
    return result
'''

with open("pipeline/indicators.py", "w") as f:
    f.write(indicators_code)

from pipeline.indicators import add_technical_indicators
import pandas as pd

# Đọc file đã xử lý như merged_data.csv
df = pd.read_csv("pipeline/merged_data.csv")
df_with_indicators = add_technical_indicators(df)
df_with_indicators.head()